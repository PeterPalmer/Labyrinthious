// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Labyrinthious.Cloud.Scripts.typings
{
    using System.IO;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using Microsoft.AspNet.SignalR;
    using Microsoft.AspNet.SignalR.Hubs;
    using System.Linq;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class Hubs : HubsBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 3 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
 /* Update this line to match your version of SignalR */ 
            
            #line default
            #line hidden
            
            #line 5 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
 /* Load the current project's DLL to make sure the DefaultHubManager can find things */ 
            
            #line default
            #line hidden
            
            #line 20 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    var hubmanager = new DefaultHubManager(new DefaultDependencyResolver());

            
            #line default
            #line hidden
            this.Write(@"// Get signalr.d.ts.ts from https://github.com/borisyankov/DefinitelyTyped (or delete the reference)
/// <reference path=""signalr/signalr.d.ts"" />
/// <reference path=""jquery/jquery.d.ts"" />

////////////////////
// available hubs //
////////////////////
//#region available hubs

interface SignalR {
");
            
            #line 33 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

foreach (var hub in hubmanager.GetHubs())
{

            
            #line default
            #line hidden
            this.Write("\r\n    /**\r\n      * The hub implemented by ");
            
            #line 39 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.HubType.FullName));
            
            #line default
            #line hidden
            this.Write("\r\n      */\r\n    ");
            
            #line 41 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FirstCharLowered(hub.Name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 41 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.HubType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 42 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

}

            
            #line default
            #line hidden
            this.Write("}\r\n//#endregion available hubs\r\n\r\n///////////////////////\r\n// Service Contracts /" +
                    "/\r\n///////////////////////\r\n//#region service contracts\r\n");
            
            #line 52 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

foreach (var hub in hubmanager.GetHubs())
{
    var hubType = hub.HubType;
    string clientContractName = hubType.Namespace + ".I" + hubType.Name + "Client";
    var clientType = hubType.Assembly.GetType(clientContractName);

            
            #line default
            #line hidden
            this.Write("\r\n//#region ");
            
            #line 60 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.Name));
            
            #line default
            #line hidden
            this.Write(" hub\r\n\r\ninterface ");
            
            #line 62 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hubType.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\n    \r\n    /**\r\n      * This property lets you send messages to the ");
            
            #line 65 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.Name));
            
            #line default
            #line hidden
            this.Write(" hub.\r\n      */\r\n    server : ");
            
            #line 67 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hubType.Name));
            
            #line default
            #line hidden
            this.Write("Server;\r\n\r\n    /**\r\n      * The functions on this property should be replaced if " +
                    "you want to receive messages from the ");
            
            #line 70 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.Name));
            
            #line default
            #line hidden
            this.Write(" hub.\r\n      */\r\n    client : ");
            
            #line 72 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(clientType != null?(hubType.Name+"Client"):"any"));
            
            #line default
            #line hidden
            this.Write(";\r\n}\r\n\r\n");
            
            #line 75 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

/* Server type definition */

            
            #line default
            #line hidden
            this.Write("interface ");
            
            #line 78 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hubType.Name));
            
            #line default
            #line hidden
            this.Write("Server {\r\n");
            
            #line 79 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    foreach (var method in hubmanager.GetHubMethods(hub.Name ))
    {
        var ps = method.Parameters.Select(x => x.Name+ " : "+GetTypeContractName(x.ParameterType));
        var docs = GetXmlDocForMethod(hubType.GetMethod(method.Name));


            
            #line default
            #line hidden
            this.Write("\r\n    /** \r\n      * Sends a \"");
            
            #line 88 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FirstCharLowered(method.Name)));
            
            #line default
            #line hidden
            this.Write("\" message to the ");
            
            #line 88 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.Name));
            
            #line default
            #line hidden
            this.Write(" hub.\r\n      * Contract Documentation: ");
            
            #line 89 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(docs.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 90 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    foreach (var p in method.Parameters)
    {

            
            #line default
            #line hidden
            this.Write("      * @param ");
            
            #line 94 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write(" {");
            
            #line 94 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeContractName(p.ParameterType)));
            
            #line default
            #line hidden
            this.Write("} ");
            
            #line 94 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(docs.ParameterSummary(p.Name)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 95 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    }

            
            #line default
            #line hidden
            this.Write("      * @return {JQueryPromise of ");
            
            #line 98 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeContractName(method.ReturnType)));
            
            #line default
            #line hidden
            this.Write("}\r\n      */\r\n    ");
            
            #line 100 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FirstCharLowered(method.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 100 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", ps)));
            
            #line default
            #line hidden
            this.Write(") : JQueryPromise<");
            
            #line 100 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeContractName(method.ReturnType)));
            
            #line default
            #line hidden
            this.Write(">;\r\n");
            
            #line 101 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    }

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 106 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

/* Client type definition */

            
            #line default
            #line hidden
            
            #line 109 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
 
    if (clientType != null)
    {

            
            #line default
            #line hidden
            this.Write("interface ");
            
            #line 113 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hubType.Name));
            
            #line default
            #line hidden
            this.Write("Client\r\n{\r\n");
            
            #line 115 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    foreach (var method in clientType.GetMethods())
    {
        var ps = method.GetParameters().Select(x => x.Name+ " : "+GetTypeContractName(x.ParameterType));
        var docs = GetXmlDocForMethod(method);


            
            #line default
            #line hidden
            this.Write("\r\n    /**\r\n      * Set this function with a \"function(");
            
            #line 124 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", ps)));
            
            #line default
            #line hidden
            this.Write("){}\" to receive the \"");
            
            #line 124 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FirstCharLowered(method.Name)));
            
            #line default
            #line hidden
            this.Write("\" message from the ");
            
            #line 124 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.Name));
            
            #line default
            #line hidden
            this.Write(" hub.\r\n      * Contract Documentation: ");
            
            #line 125 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(docs.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 126 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    foreach (var p in method.GetParameters())
    {

            
            #line default
            #line hidden
            this.Write("      * @param ");
            
            #line 130 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Name));
            
            #line default
            #line hidden
            this.Write(" {");
            
            #line 130 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeContractName(p.ParameterType)));
            
            #line default
            #line hidden
            this.Write("} ");
            
            #line 130 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(docs.ParameterSummary(p.Name)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 131 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    }

            
            #line default
            #line hidden
            this.Write("      * @return {void}\r\n      */\r\n    ");
            
            #line 136 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FirstCharLowered(method.Name)));
            
            #line default
            #line hidden
            this.Write(" : (");
            
            #line 136 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", ps)));
            
            #line default
            #line hidden
            this.Write(") => void;\r\n");
            
            #line 137 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    }

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 142 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    }

            
            #line default
            #line hidden
            this.Write("//#endregion ");
            
            #line 145 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(hub.Name));
            
            #line default
            #line hidden
            this.Write(" hub\r\n\r\n");
            
            #line 147 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

}

            
            #line default
            #line hidden
            this.Write("//#endregion service contracts\r\n\r\n\r\n\r\n////////////////////\r\n// Data Contracts //\r" +
                    "\n////////////////////\r\n//#region data contracts\r\n");
            
            #line 158 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

while(viewTypes.Count!=0)
{
    var type = viewTypes.Pop();

            
            #line default
            #line hidden
            this.Write("\r\n\r\n/**\r\n  * Data contract for ");
            
            #line 166 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write("\r\n  */\r\ninterface ");
            
            #line 168 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GenericSpecificName(type)));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 169 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    foreach (var property in type.GetProperties(BindingFlags.Instance|BindingFlags.Public|BindingFlags.DeclaredOnly))
    {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 173 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 173 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeContractName(property.PropertyType)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 174 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

    }

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 178 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n//#endregion data contracts\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 184 "D:\Projekt\Labyrinthious\Labyrinthious.Cloud\Scripts\typings\Hubs.tt"


    private Stack<Type> viewTypes = new Stack<Type>();
    private HashSet<Type> doneTypes = new HashSet<Type>();

    private string GetTypeContractName(Type type)
    {
        if (type == typeof (Task))
        {
            return "void /*task*/";
        }

        if (type.IsArray)
        {
            return GetTypeContractName(type.GetElementType())+"[]";
        }

        if (type.IsGenericType && typeof(Task<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        {
            return GetTypeContractName(type.GetGenericArguments()[0]);
        }

        if (type.IsGenericType && typeof(Nullable<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        {
            return GetTypeContractName(type.GetGenericArguments()[0]);
        }

        if (type.IsGenericType && typeof(List<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        {
            return GetTypeContractName(type.GetGenericArguments()[0])+"[]";
        }

    

        switch (type.Name.ToLowerInvariant())
        {

            case "datetime":
                return "string";
            case "int16":
            case "int32":
            case "int64":
            case "single":
            case "double":
                return "number";
            case "boolean":
                return "bool";
            case "void":
            case "string":
                return type.Name.ToLowerInvariant();
        }

        if (!doneTypes.Contains(type))
        {
            doneTypes.Add(type);
            viewTypes.Push(type);
        }
        return GenericSpecificName(type);
    }

    private string GenericSpecificName(Type type)
    {
        //todo: update for Typescript's generic syntax once invented
        string name = type.Name;
        int index = name.IndexOf('`');
        name = index == -1 ? name : name.Substring(0, index);
        if (type.IsGenericType)
        {
            name += "Of"+string.Join("And", type.GenericTypeArguments.Select(GenericSpecificName));
        }
        return name;
    }

    private string FirstCharLowered(string s)
    {
        return Regex.Replace(s, "^.", x => x.Value.ToLowerInvariant());
    }

    Dictionary<Assembly, XDocument> xmlDocs = new Dictionary<Assembly, XDocument>(); 

    private XDocument XmlDocForAssembly(Assembly a)
    {
        XDocument value;
        if (!xmlDocs.TryGetValue(a, out value))
        {
            var path = new Uri(a.CodeBase.Replace(".dll", ".xml").Replace(".DLL", ".xml")).LocalPath;
            xmlDocs[a] = value = File.Exists(path) ? XDocument.Load(path) : null;
        }
        return value;
    }

    private MethodDocs GetXmlDocForMethod(MethodInfo method)
    {
        var xmlDocForHub = XmlDocForAssembly(method.DeclaringType.Assembly);
        if (xmlDocForHub == null)
        {
            return new MethodDocs();
        }

        var methodName = string.Format("M:{0}.{1}({2})", method.DeclaringType.FullName, method.Name, string.Join(",", method.GetParameters().Select(x => x.ParameterType.FullName)));
        var xElement = xmlDocForHub.Descendants("member").SingleOrDefault(x => (string) x.Attribute("name") == methodName);
        return xElement==null?new MethodDocs():new MethodDocs(xElement);
    }

    private class MethodDocs
    {
        public MethodDocs()
        {
            Summary = "---";
            Parameters = new Dictionary<string, string>();
        }

        public MethodDocs(XElement xElement)
        {
            Summary = ((string) xElement.Element("summary") ?? "").Trim();
            Parameters = xElement.Elements("param").ToDictionary(x => (string) x.Attribute("name"), x=>x.Value);
        }

        public string Summary { get; set; }
        public Dictionary<string, string> Parameters { get; set; }
    
        public string ParameterSummary(string name)
        {
            if (Parameters.ContainsKey(name))
            {
                return Parameters[name];
            }
            return "";
        }
    }


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class HubsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
